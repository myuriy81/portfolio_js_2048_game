{"mappings":"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","sources":["<anon>","src/scripts/main.js","src/modules/Game.class.js"],"sourcesContent":["\"use strict\";\nvar $a5fd07fa01589658$exports = {};\n\"use strict\";\n/**\n * This class represents the game.\n * Now it has a basic structure, that is needed for testing.\n * Feel free to add more props and methods if needed.\n */ class $a5fd07fa01589658$var$Game {\n    static gameStatus = {\n        idle: \"idle\",\n        playing: \"playing\",\n        win: \"win\",\n        lose: \"lose\"\n    };\n    constructor(initialState = [\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ]\n    ]){\n        this.initialState = initialState;\n        this.state = this.initialState.map((row)=>[\n                ...row\n            ]);\n        this.status = $a5fd07fa01589658$var$Game.gameStatus.idle;\n        this.score = 0;\n    }\n    moveLeft() {\n        if (this.getStatus() !== $a5fd07fa01589658$var$Game.gameStatus.playing) return;\n        let move = false;\n        const newState = this.state.map((row)=>{\n            const filterRow = row.filter((cell)=>cell !== 0);\n            const newRow = [];\n            for(let i = 0; i < filterRow.length; i++)if (filterRow[i] === filterRow[i + 1]) {\n                const mergedValue = filterRow[i] * 2;\n                newRow.push(mergedValue);\n                this.score += mergedValue;\n                i++;\n                move = true;\n            } else newRow.push(filterRow[i]);\n            while(newRow.length < row.length)newRow.push(0);\n            if (!move && !row.every((cell, index)=>cell === newRow[index])) move = true;\n            return newRow;\n        });\n        if (move) {\n            this.state = newState;\n            this.addCell();\n            this.setState();\n            this.checkStatus();\n        }\n        return move;\n    }\n    moveRight() {\n        if (this.getStatus() !== $a5fd07fa01589658$var$Game.gameStatus.playing) return;\n        let move = false;\n        const newState = this.state.map((row)=>{\n            const filterRow = row.filter((cell)=>cell !== 0);\n            const newRow = [];\n            for(let i = filterRow.length - 1; i >= 0; i--)if (filterRow[i] === filterRow[i - 1]) {\n                const mergedValue = filterRow[i] * 2;\n                newRow.unshift(mergedValue);\n                this.score += mergedValue;\n                i--;\n                move = true;\n            } else newRow.unshift(filterRow[i]);\n            while(newRow.length < row.length)newRow.unshift(0);\n            if (!move && !row.every((cell, index)=>cell === newRow[index])) move = true;\n            return newRow;\n        });\n        if (move) {\n            this.state = newState;\n            this.addCell();\n            this.setState();\n            this.checkStatus();\n        }\n        return move;\n    }\n    moveUp() {\n        if (this.getStatus() !== $a5fd07fa01589658$var$Game.gameStatus.playing) return;\n        let move = false;\n        const newState = this.state.map((row)=>[\n                ...row\n            ]);\n        for(let x = 0; x < this.state[0].length; x++){\n            const filterColumn = [];\n            for(let y = 0; y < this.state.length; y++)if (this.state[y][x] !== 0) filterColumn.push(this.state[y][x]);\n            const newColumn = [];\n            for(let i = 0; i < filterColumn.length; i++)if (filterColumn[i] === filterColumn[i + 1]) {\n                const mergedValue = filterColumn[i] * 2;\n                newColumn.push(mergedValue);\n                this.score += mergedValue;\n                i++;\n                move = true;\n            } else newColumn.push(filterColumn[i]);\n            while(newColumn.length < this.state.length)newColumn.push(0);\n            for(let y = 0; y < this.state.length; y++)if (newState[y][x] !== newColumn[y]) {\n                newState[y][x] = newColumn[y];\n                move = true;\n            }\n        }\n        if (move) {\n            this.state = newState;\n            this.addCell();\n            this.setState();\n            this.checkStatus();\n        }\n        return move;\n    }\n    moveDown() {\n        if (this.getStatus() !== $a5fd07fa01589658$var$Game.gameStatus.playing) return;\n        let move = false;\n        const newState = this.state.map((row)=>[\n                ...row\n            ]);\n        for(let x = 0; x < this.state[0].length; x++){\n            const filterColumn = [];\n            for(let y = this.state.length - 1; y >= 0; y--)if (this.state[y][x] !== 0) filterColumn.push(this.state[y][x]);\n            const newColumn = [];\n            for(let i = 0; i < filterColumn.length; i++)if (filterColumn[i] === filterColumn[i + 1]) {\n                const mergedValue = filterColumn[i] * 2;\n                newColumn.unshift(mergedValue);\n                this.score += mergedValue;\n                i++;\n                move = true;\n            } else newColumn.unshift(filterColumn[i]);\n            while(newColumn.length < this.state.length)newColumn.unshift(0);\n            for(let y = 0; y < this.state.length; y++)if (newState[y][x] !== newColumn[y]) {\n                newState[y][x] = newColumn[y];\n                move = true;\n            }\n        }\n        if (move) {\n            this.state = newState;\n            this.addCell();\n            this.setState();\n            this.checkStatus();\n        }\n        return move;\n    }\n    getState() {\n        return this.state;\n    }\n    getScore() {\n        return this.score;\n    }\n    getStatus() {\n        return this.status;\n    }\n    start() {\n        this.status = $a5fd07fa01589658$var$Game.gameStatus.playing;\n        this.state = this.initialState.map((row)=>[\n                ...row\n            ]);\n        this.addCell();\n        this.addCell();\n        this.setState();\n    }\n    restart() {\n        this.score = 0;\n        this.status = $a5fd07fa01589658$var$Game.gameStatus.idle;\n        this.state = this.initialState.map((row)=>[\n                ...row\n            ]);\n        this.setState();\n    }\n    addCell() {\n        const emptyCells = [];\n        for(let i = 0; i < this.state.length; i++){\n            for(let j = 0; j < this.state[i].length; j++)if (this.state[i][j] === 0) emptyCells.push({\n                y: i,\n                x: j\n            });\n        }\n        if (emptyCells.length === 0) return;\n        const randomIndex = this.addRandomNumber(emptyCells.length);\n        const { y: y, x: x } = emptyCells[randomIndex];\n        const newState = this.state.map((row)=>[\n                ...row\n            ]);\n        newState[y][x] = this.getRandomCell();\n        this.state = newState;\n    }\n    setState() {\n        const cells = document.querySelectorAll(\".field-cell\");\n        const stateValues = this.state.flat();\n        if (cells.length === 0) return;\n        for(let i = 0; i < stateValues.length; i++){\n            const currentCell = cells[i];\n            const currentValue = stateValues[i];\n            if (!currentCell) continue;\n            currentCell.className = \"field-cell\";\n            if (currentValue > 0) {\n                currentCell.textContent = currentValue;\n                currentCell.classList.add(`field-cell--${currentValue}`);\n            } else currentCell.textContent = \"\";\n        }\n    }\n    addRandomNumber(max) {\n        return Math.floor(Math.random() * max);\n    }\n    getRandomCell() {\n        return Math.random() < 0.9 ? 2 : 4;\n    }\n    checkStatus() {\n        let move = false;\n        let merge = false;\n        for(let i = 0; i < this.state.length; i++){\n            for(let j = 0; j < this.state[i].length; j++)if (this.state[i][j] === 2048) {\n                this.status = $a5fd07fa01589658$var$Game.gameStatus.win;\n                return;\n            }\n        }\n        for(let i = 0; i < this.state.length; i++){\n            for(let j = 0; j < this.state[i].length - 1; j++)if (this.state[i][j] === this.state[i][j + 1]) {\n                merge = true;\n                break;\n            }\n            if (merge) break;\n        }\n        if (!merge) for(let i = 0; i < this.state.length - 1; i++){\n            for(let j = 0; j < this.state[i].length; j++)if (this.state[i][j] === this.state[i + 1][j]) {\n                merge = true;\n                break;\n            }\n            if (merge) break;\n        }\n        for(let i = 0; i < this.state.length; i++){\n            for(let j = 0; j < this.state[i].length; j++)if (this.state[i][j] === 0) {\n                move = true;\n                break;\n            }\n            if (move) break;\n        }\n        if (!move && !merge) this.status = $a5fd07fa01589658$var$Game.gameStatus.lose;\n    }\n}\n$a5fd07fa01589658$exports = $a5fd07fa01589658$var$Game;\n\n\nconst $09e991522ca7e64e$var$game = new $a5fd07fa01589658$exports();\n// Write your code here\nconst $09e991522ca7e64e$var$startButton = document.querySelector(\".start\");\nconst $09e991522ca7e64e$var$startMessage = document.querySelector(\".message-start\");\nconst $09e991522ca7e64e$var$loseMessage = document.querySelector(\".message-lose\");\nconst $09e991522ca7e64e$var$winMessage = document.querySelectorAll(\".message-win\");\nconst $09e991522ca7e64e$var$score = document.querySelector(\".game-score\");\nfunction $09e991522ca7e64e$var$createMessage() {\n    if ($09e991522ca7e64e$var$game.getStatus() === $a5fd07fa01589658$exports.gameStatus.lose) $09e991522ca7e64e$var$loseMessage.classList.remove(\"hidden\");\n    else if ($09e991522ca7e64e$var$game.getStatus() === $a5fd07fa01589658$exports.gameStatus.win) $09e991522ca7e64e$var$winMessage.classList.remove(\"hidden\");\n}\n$09e991522ca7e64e$var$startButton.addEventListener(\"click\", ()=>{\n    if ($09e991522ca7e64e$var$startButton.classList.contains(\"start\")) {\n        $09e991522ca7e64e$var$game.start();\n        $09e991522ca7e64e$var$startButton.classList = \"button restart\";\n        $09e991522ca7e64e$var$startButton.innerHTML = \"Restart\";\n        $09e991522ca7e64e$var$startMessage.classList.add(\"hidden\");\n    } else if ($09e991522ca7e64e$var$startButton.classList.contains(\"restart\")) {\n        $09e991522ca7e64e$var$game.restart();\n        $09e991522ca7e64e$var$score.innerHTML = $09e991522ca7e64e$var$game.getScore();\n        $09e991522ca7e64e$var$startButton.classList = \"button start\";\n        $09e991522ca7e64e$var$startButton.innerHTML = \"Start\";\n        $09e991522ca7e64e$var$startMessage.classList.remove(\"hidden\");\n        $09e991522ca7e64e$var$loseMessage.classList.add(\"hidden\");\n        $09e991522ca7e64e$var$winMessage.classList.add(\"hidden\");\n    }\n});\ndocument.addEventListener(\"keydown\", (keyEvent)=>{\n    keyEvent.preventDefault();\n    if ($09e991522ca7e64e$var$game.getStatus() !== \"playing\") return;\n    const moveActions = {\n        ArrowUp: $09e991522ca7e64e$var$game.moveUp,\n        ArrowDown: $09e991522ca7e64e$var$game.moveDown,\n        ArrowLeft: $09e991522ca7e64e$var$game.moveLeft,\n        ArrowRight: $09e991522ca7e64e$var$game.moveRight\n    };\n    const action = moveActions[keyEvent.key];\n    if (action) action.call($09e991522ca7e64e$var$game);\n    $09e991522ca7e64e$var$score.innerHTML = $09e991522ca7e64e$var$game.getScore();\n    $09e991522ca7e64e$var$createMessage();\n});\n\n\n//# sourceMappingURL=index.75518d62.js.map\n","'use strict';\n\n// Uncomment the next lines to use your game instance in the browser\nconst Game = require('../modules/Game.class');\nconst game = new Game();\n\n// Write your code here\n\nconst startButton = document.querySelector('.start');\nconst startMessage = document.querySelector('.message-start');\nconst loseMessage = document.querySelector('.message-lose');\nconst winMessage = document.querySelectorAll('.message-win');\nconst score = document.querySelector('.game-score');\n\nfunction createMessage() {\n  if (game.getStatus() === Game.gameStatus.lose) {\n    loseMessage.classList.remove('hidden');\n  } else if (game.getStatus() === Game.gameStatus.win) {\n    winMessage.classList.remove('hidden');\n  }\n}\n\nstartButton.addEventListener('click', () => {\n  if (startButton.classList.contains('start')) {\n    game.start();\n    startButton.classList = 'button restart';\n    startButton.innerHTML = 'Restart';\n    startMessage.classList.add('hidden');\n  } else if (startButton.classList.contains('restart')) {\n    game.restart();\n    score.innerHTML = game.getScore();\n    startButton.classList = 'button start';\n    startButton.innerHTML = 'Start';\n    startMessage.classList.remove('hidden');\n    loseMessage.classList.add('hidden');\n    winMessage.classList.add('hidden');\n  }\n});\n\ndocument.addEventListener('keydown', (keyEvent) => {\n  keyEvent.preventDefault();\n\n  if (game.getStatus() !== 'playing') {\n    return;\n  }\n\n  const moveActions = {\n    ArrowUp: game.moveUp,\n    ArrowDown: game.moveDown,\n    ArrowLeft: game.moveLeft,\n    ArrowRight: game.moveRight,\n  };\n\n  const action = moveActions[keyEvent.key];\n\n  if (action) {\n    action.call(game);\n  }\n  score.innerHTML = game.getScore();\n  createMessage();\n});\n","'use strict';\n\n/**\n * This class represents the game.\n * Now it has a basic structure, that is needed for testing.\n * Feel free to add more props and methods if needed.\n */\nclass Game {\n  static gameStatus = {\n    idle: 'idle',\n    playing: 'playing',\n    win: 'win',\n    lose: 'lose',\n  };\n  constructor(\n    initialState = [\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n    ],\n  ) {\n    this.initialState = initialState;\n    this.state = this.initialState.map((row) => [...row]);\n    this.status = Game.gameStatus.idle;\n    this.score = 0;\n  }\n\n  moveLeft() {\n    if (this.getStatus() !== Game.gameStatus.playing) {\n      return;\n    }\n\n    let move = false;\n    const newState = this.state.map((row) => {\n      const filterRow = row.filter((cell) => cell !== 0);\n      const newRow = [];\n\n      for (let i = 0; i < filterRow.length; i++) {\n        if (filterRow[i] === filterRow[i + 1]) {\n          const mergedValue = filterRow[i] * 2;\n\n          newRow.push(mergedValue);\n          this.score += mergedValue;\n          i++;\n          move = true;\n        } else {\n          newRow.push(filterRow[i]);\n        }\n      }\n\n      while (newRow.length < row.length) {\n        newRow.push(0);\n      }\n\n      if (!move && !row.every((cell, index) => cell === newRow[index])) {\n        move = true;\n      }\n\n      return newRow;\n    });\n\n    if (move) {\n      this.state = newState;\n      this.addCell();\n      this.setState();\n      this.checkStatus();\n    }\n\n    return move;\n  }\n\n  moveRight() {\n    if (this.getStatus() !== Game.gameStatus.playing) {\n      return;\n    }\n\n    let move = false;\n    const newState = this.state.map((row) => {\n      const filterRow = row.filter((cell) => cell !== 0);\n      const newRow = [];\n\n      for (let i = filterRow.length - 1; i >= 0; i--) {\n        if (filterRow[i] === filterRow[i - 1]) {\n          const mergedValue = filterRow[i] * 2;\n\n          newRow.unshift(mergedValue);\n          this.score += mergedValue;\n          i--;\n          move = true;\n        } else {\n          newRow.unshift(filterRow[i]);\n        }\n      }\n\n      while (newRow.length < row.length) {\n        newRow.unshift(0);\n      }\n\n      if (!move && !row.every((cell, index) => cell === newRow[index])) {\n        move = true;\n      }\n\n      return newRow;\n    });\n\n    if (move) {\n      this.state = newState;\n      this.addCell();\n      this.setState();\n      this.checkStatus();\n    }\n\n    return move;\n  }\n\n  moveUp() {\n    if (this.getStatus() !== Game.gameStatus.playing) {\n      return;\n    }\n\n    let move = false;\n    const newState = this.state.map((row) => [...row]);\n\n    for (let x = 0; x < this.state[0].length; x++) {\n      const filterColumn = [];\n\n      for (let y = 0; y < this.state.length; y++) {\n        if (this.state[y][x] !== 0) {\n          filterColumn.push(this.state[y][x]);\n        }\n      }\n\n      const newColumn = [];\n\n      for (let i = 0; i < filterColumn.length; i++) {\n        if (filterColumn[i] === filterColumn[i + 1]) {\n          const mergedValue = filterColumn[i] * 2;\n\n          newColumn.push(mergedValue);\n          this.score += mergedValue;\n          i++;\n          move = true;\n        } else {\n          newColumn.push(filterColumn[i]);\n        }\n      }\n\n      while (newColumn.length < this.state.length) {\n        newColumn.push(0);\n      }\n\n      for (let y = 0; y < this.state.length; y++) {\n        if (newState[y][x] !== newColumn[y]) {\n          newState[y][x] = newColumn[y];\n          move = true;\n        }\n      }\n    }\n\n    if (move) {\n      this.state = newState;\n      this.addCell();\n      this.setState();\n      this.checkStatus();\n    }\n\n    return move;\n  }\n\n  moveDown() {\n    if (this.getStatus() !== Game.gameStatus.playing) {\n      return;\n    }\n\n    let move = false;\n    const newState = this.state.map((row) => [...row]);\n\n    for (let x = 0; x < this.state[0].length; x++) {\n      const filterColumn = [];\n\n      for (let y = this.state.length - 1; y >= 0; y--) {\n        if (this.state[y][x] !== 0) {\n          filterColumn.push(this.state[y][x]);\n        }\n      }\n\n      const newColumn = [];\n\n      for (let i = 0; i < filterColumn.length; i++) {\n        if (filterColumn[i] === filterColumn[i + 1]) {\n          const mergedValue = filterColumn[i] * 2;\n\n          newColumn.unshift(mergedValue);\n          this.score += mergedValue;\n          i++;\n          move = true;\n        } else {\n          newColumn.unshift(filterColumn[i]);\n        }\n      }\n\n      while (newColumn.length < this.state.length) {\n        newColumn.unshift(0);\n      }\n\n      for (let y = 0; y < this.state.length; y++) {\n        if (newState[y][x] !== newColumn[y]) {\n          newState[y][x] = newColumn[y];\n          move = true;\n        }\n      }\n    }\n\n    if (move) {\n      this.state = newState;\n      this.addCell();\n      this.setState();\n      this.checkStatus();\n    }\n\n    return move;\n  }\n  getState() {\n    return this.state;\n  }\n\n  getScore() {\n    return this.score;\n  }\n\n  getStatus() {\n    return this.status;\n  }\n\n  start() {\n    this.status = Game.gameStatus.playing;\n    this.state = this.initialState.map((row) => [...row]);\n    this.addCell();\n    this.addCell();\n    this.setState();\n  }\n\n  restart() {\n    this.score = 0;\n    this.status = Game.gameStatus.idle;\n    this.state = this.initialState.map((row) => [...row]);\n    this.setState();\n  }\n\n  addCell() {\n    const emptyCells = [];\n\n    for (let i = 0; i < this.state.length; i++) {\n      for (let j = 0; j < this.state[i].length; j++) {\n        if (this.state[i][j] === 0) {\n          emptyCells.push({ y: i, x: j });\n        }\n      }\n    }\n\n    if (emptyCells.length === 0) {\n      return;\n    }\n\n    const randomIndex = this.addRandomNumber(emptyCells.length);\n    const { y, x } = emptyCells[randomIndex];\n    const newState = this.state.map((row) => [...row]);\n\n    newState[y][x] = this.getRandomCell();\n    this.state = newState;\n  }\n\n  setState() {\n    const cells = document.querySelectorAll('.field-cell');\n    const stateValues = this.state.flat();\n\n    if (cells.length === 0) {\n      return;\n    }\n\n    for (let i = 0; i < stateValues.length; i++) {\n      const currentCell = cells[i];\n      const currentValue = stateValues[i];\n\n      if (!currentCell) {\n        continue;\n      }\n\n      currentCell.className = 'field-cell';\n\n      if (currentValue > 0) {\n        currentCell.textContent = currentValue;\n        currentCell.classList.add(`field-cell--${currentValue}`);\n      } else {\n        currentCell.textContent = '';\n      }\n    }\n  }\n\n  addRandomNumber(max) {\n    return Math.floor(Math.random() * max);\n  }\n\n  getRandomCell() {\n    return Math.random() < 0.9 ? 2 : 4;\n  }\n\n  checkStatus() {\n    let move = false;\n    let merge = false;\n\n    for (let i = 0; i < this.state.length; i++) {\n      for (let j = 0; j < this.state[i].length; j++) {\n        if (this.state[i][j] === 2048) {\n          this.status = Game.gameStatus.win;\n\n          return;\n        }\n      }\n    }\n\n    for (let i = 0; i < this.state.length; i++) {\n      for (let j = 0; j < this.state[i].length - 1; j++) {\n        if (this.state[i][j] === this.state[i][j + 1]) {\n          merge = true;\n          break;\n        }\n      }\n\n      if (merge) {\n        break;\n      }\n    }\n\n    if (!merge) {\n      for (let i = 0; i < this.state.length - 1; i++) {\n        for (let j = 0; j < this.state[i].length; j++) {\n          if (this.state[i][j] === this.state[i + 1][j]) {\n            merge = true;\n            break;\n          }\n        }\n\n        if (merge) {\n          break;\n        }\n      }\n    }\n\n    for (let i = 0; i < this.state.length; i++) {\n      for (let j = 0; j < this.state[i].length; j++) {\n        if (this.state[i][j] === 0) {\n          move = true;\n          break;\n        }\n      }\n\n      if (move) {\n        break;\n      }\n    }\n\n    if (!move && !merge) {\n      this.status = Game.gameStatus.lose;\n    }\n  }\n}\n\nmodule.exports = Game;\n"],"names":["$a5fd07fa01589658$exports","$a5fd07fa01589658$var$Game","gameStatus","idle","playing","win","lose","constructor","initialState","state","map","row","status","score","moveLeft","getStatus","move","newState","filterRow","filter","cell","newRow","i","length","mergedValue","push","every","index","addCell","setState","checkStatus","moveRight","unshift","moveUp","x","filterColumn","y","newColumn","moveDown","getState","getScore","start","restart","emptyCells","j","randomIndex","addRandomNumber","getRandomCell","cells","document","querySelectorAll","stateValues","flat","currentCell","currentValue","className","textContent","classList","add","max","Math","floor","random","merge","$09e991522ca7e64e$var$game","$09e991522ca7e64e$var$startButton","querySelector","$09e991522ca7e64e$var$startMessage","$09e991522ca7e64e$var$loseMessage","$09e991522ca7e64e$var$winMessage","$09e991522ca7e64e$var$score","addEventListener","contains","innerHTML","remove","keyEvent","preventDefault","action","moveActions","ArrowUp","ArrowDown","ArrowLeft","ArrowRight","key","call"],"version":3,"file":"index.75518d62.js.map"}